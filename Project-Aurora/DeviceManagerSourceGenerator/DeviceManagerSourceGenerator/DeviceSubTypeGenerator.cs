using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace DeviceManagerSourceGenerator;

[Generator]
public class DeviceSubTypeGenerator : ISourceGenerator
{
    private const string InterfaceName = "AuroraDeviceManager.Devices.IDevice";
    private const string GeneratedClassName = "DeviceSubTypes";

    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required for this example
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var compilation = context.Compilation;

        // Retrieve the interface symbol
        var deviceInterface = compilation.GetTypeByMetadataName(InterfaceName);

        if (deviceInterface == null)
        {
            // Interface not found, do nothing
            return;
        }

        // Get all types in the compilation that implement the interface
        var subTypes = context.Compilation.GetSymbolsWithName(s => true)
            .OfType<INamedTypeSymbol>()
            .Where(t => t.AllInterfaces.Contains(deviceInterface) && !t.IsAbstract && !t.Equals(deviceInterface, SymbolEqualityComparer.Default));

        // Generate source code for listing sub-types
        // Generate a simple class with a static method returning sub-types
        var subTypeList = string.Join(", ", subTypes.Select(t => $"typeof({t})"));
        var sourceCode = $$"""
                            // <auto-generated/>
                            // {{DateTime.Now}}

                            using System;

                            namespace AuroraDeviceManager.Devices;

                            public static class {{GeneratedClassName}}
                            {
                                public static Type[] GetSubTypes()
                                {
                                    return [ {{subTypeList}} ];
                                }
                            }
                            """;

        // Add the generated source to the compilation
        context.AddSource($"{GeneratedClassName}.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
    }
}